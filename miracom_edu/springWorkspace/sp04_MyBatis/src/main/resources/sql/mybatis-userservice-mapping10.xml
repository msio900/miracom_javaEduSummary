<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 
	지금까지 배운 모든 내용을 이곳에 다 연결해서 적용.
	1. CRUD
	2. Dynamic Query
	3. Static Query
	4. sql, include 태그를 이용한 퀴리문 재사용
	5. ResultMap 사용으로 as Alias 사용을 줄임.
	===
	6. LIKE 연산자와 와일드 카드 사용법은 지금은 없다..~Mapping02.xml을 참고하기 바람.
 -->
<mapper namespace="UserMapper10">
	<resultMap type="user" id="userSelectRM">
		<result property="userId" column="user_id"/>
		<result property="userName" column="user_name"/>
		<result property="password" column="password"/>
		<result property="age" column="age"/>
		<result property="grade" column="grade"/>
		<result property="regDate" column="regdate"/>
	</resultMap>
	<sql id="select-users">
		SELECT
		user_id, user_name, password, age, grade, reg_date
		FROM users
	</sql>
	<sql id="orderby-userid-desc">
		ORDER BY user_id DESC
	</sql>
	<!-- INSERT -->
	<insert id="addUser" parameterType="user">
		INSERT INTO
		users (user_id, user_name, password, age, grade)
		VALUES(#{userId}, #{userName}, #{password}, #{age},#{grade})
	
	</insert>

	<!-- DELETE -->
	<delete id="removeUser" parameterType="string">
		DELETE FROM
		users
		WHERE user_id=#{VALUE}	
	</delete>
	<!-- UPSATE -->
	<update id="updateUser" parameterType="user">	
		UPDATE
		users
		SET user_name = #{userName}, password = #{password}, age =#{age}
		WHERE user_id=#{userId}
	</update>

	<!-- SELECT :: 정적쿼리-->
	<select id="getUser" resultMap="userSelectRM" parameterType="user">
		SELECT
		user_id, user_name, password, age, grade, reg_date
		FROM users
		WHERE user_id=#{userId}	
	</select>
	<!-- SELECT :: 동적쿼리-->
	 <select id="getUserList" parameterType="user" resultMap="userSelectRM">
    	<include refid="select-users"/>
		<where>
			<if test="userName !=null">
				user_name LIKE #{userName}
			</if>
			<if test="age !=null">
				OR age LIKE #{age}
			</if>
		</where>
		<include refid="orderby-userid-desc"/>
    </select>
</mapper>